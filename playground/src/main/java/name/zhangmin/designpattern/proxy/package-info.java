/**
 * 一个类代表另一个类的功能。属于结构性模式的一种。通过创建已有类
 * 的代理类，向外界提供功能接口。
 * <p/>
 * 意图：为其他对象提供一种代理，以控制对这个对象的访问。
 * <p/>
 * 主要解决：直接访问类带来的问题，如安全问题，访问控制，远程访问等。
 * <p/>
 * 适用场景：1）远程代理；2）Copy-on-Write代理；3）保护代理；
 * 4）Cache代理
 * <p/>
 * 关键代码实现：实现与被代理类的组合。
 * <p/>
 * 优点：职责清晰、高扩展性、智能化。
 * <p/>
 * 缺点：1）代理过程可能影响性能；2）实现代理类需要额外工作，增加复杂性。
 * <p/>
 * 区别：1)适配器模式主要改变所有考虑对象的接口，而代理对象不能改变所代理的接口；
 * 2）装饰器模式为了增加功能，代理模式是增加控制。
 */
package name.zhangmin.designpattern.proxy;